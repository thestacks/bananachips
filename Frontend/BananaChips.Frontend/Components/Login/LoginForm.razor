<MudCard>
    <MudForm Model="@Model" @ref="@Form" Validation="@Validator.ValidationSummary">
        <MudCardHeader Class="justify-center">
            <MudImage Src="chips.png" Height="64"/>
            <MudText Class="ml-3" Typo="Typo.h5">BananaChips</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField @bind-Value="@Model.Email" For="@(() => Model.Email)" Immediate="true" Label="Email" InputType="InputType.Email"/>
            <MudTextField @bind-Value="@Model.Password" For="@(() => Model.Password)" Immediate="true" Label="Password" InputType="InputType.Password"/>
        </MudCardContent>
        <MudCardActions Class="text-center">
            <MudButton Class="mr-auto ml-auto" StartIcon="@Icons.Filled.Login" Variant="Variant.Filled" Color="Color.Primary"  OnClick="@(async () => await Submit())">
                Login
            </MudButton>
        </MudCardActions>
    </MudForm>
</MudCard>

@code {
    public class LoginFormModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    public class LoginFormModelValidator : AbstractValidator<LoginFormModel>
    {
        public LoginFormModelValidator()
        {
            RuleFor(r => r.Email).NotEmpty().WithMessage("Email is required").EmailAddress().WithMessage("Invalid email format");
            RuleFor(r => r.Password).NotEmpty().WithMessage("Password is required");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidationSummary => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<LoginFormModel>.CreateWithOptions((LoginFormModel)model, x => x.IncludeProperties(propertyName)));
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        };
    }

    private LoginFormModel Model = new();
    private LoginFormModelValidator Validator = new();
    private MudForm Form;
    [Inject] private ISessionManager SessionManager { get; set; }

    private async Task Submit()
    {
        await Form.Validate();
        if (!Form.IsValid)
            return;
        var data = Form.Model as LoginFormModel;
        await SessionManager.Login(data.Email, data.Password);
    }
}