<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" FullWidth="true" OnClick="OnAddButtonClick">Add</MudButton>
<MudSpacer />
<MudTable @ref="@Table" ServerData="LoadDataAsync">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Companies</MudText>
        <MudSpacer />
        <MudSpacer/>
        <MudTextField T="string" ValueChanged="OnSearchChange" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="@(nameof(GetCompaniesQuery.Response.CompanyListElement.Id))" T="GetCompaniesQuery.Response.CompanyListElement">Id</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="@nameof(GetCompaniesQuery.Response.CompanyListElement.Identifier)" T="GetCompaniesQuery.Response.CompanyListElement">Identifier</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="@nameof(GetCompaniesQuery.Response.CompanyListElement.Name)" T="GetCompaniesQuery.Response.CompanyListElement">Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            Actions
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Identifier">@context.Identifier</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd>
            <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" OverrideStyles="false">
                <MudTooltip Text="Edit" Color="Color.Primary">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => OnEditButtonClick(context.Id)" Color="Color.Primary" Variant="Variant.Outlined"/>
                </MudTooltip>
                <MudTooltip Text="Delete" Color="Color.Secondary">
                    <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Secondary" Variant="Variant.Outlined" OnClick="() => OnDeleteButtonClickAsync(context.Id, context.Name)"/>
                </MudTooltip>
            </MudButtonGroup>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>There are no companies.</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </LoadingContent>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {

    private MudTable<GetCompaniesQuery.Response.CompanyListElement> Table;
    private IEnumerable<GetCompaniesQuery.Response.CompanyListElement> Items;
    private int TotalItems;
    private string SearchText;
    [Inject] private IBackendConnector BackendConnector { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private IDialogService DialogService { get; set; }

    private async Task<TableData<GetCompaniesQuery.Response.CompanyListElement>> LoadDataAsync(TableState tableState)
    {
        var pagination = tableState.CalculatePagination();
        var request = new GetCompaniesQuery.Request(pagination.Skip, pagination.Take, SearchText, tableState.SortLabel, tableState.SortDirection);
        var result = await BackendConnector.SendQueryAsync<GetCompaniesQuery.Response>(request.Query, request.OperationName, request);
        return new TableData<GetCompaniesQuery.Response.CompanyListElement> { TotalItems = result.Data.Companies.TotalCount, Items = result.Data.Companies.Items };
    }

    private void OnSearchChange(string searchKeyword)
    {
        SearchText = searchKeyword;
        Table.ReloadServerData();
    }

    private void OnAddButtonClick()
    {
        NavigationManager.NavigateTo(FrontendRoutes.Companies.New);
    }

    private void OnEditButtonClick(int id)
    {
        NavigationManager.NavigateTo(FrontendRoutes.GetRouteWithParameter(FrontendRoutes.Companies.Edit, id));
    }

    private async Task OnDeleteButtonClickAsync(int id, string name)
    {
        var parameters = new DialogParameters
        {
            { nameof(DynamicDialog.Text), $"Are you sure, that you want to remove company '{name}'?" },
            { nameof(DynamicDialog.ButtonText), "Delete" },
            { nameof(DynamicDialog.Color), Color.Error }
        };
        var dialogOptions = new DialogOptions { CloseButton = false };
        var dialog = DialogService.Show<DynamicDialog>("Confirm delete operation", parameters, dialogOptions);
        var dialogResult = await dialog.Result;
        if (dialogResult.Cancelled)
        {
            return;
        }

        var request = new DeleteCompanyMutation.Request(id);
        var response = await BackendConnector.SendMutationAsync<DeleteCompanyMutation.Response>(request.Query, request.OperationName, request);
        if (response.IsSuccess)
        {
            await Table.ReloadServerData();
        }
    }
}